-- üõ°Ô∏è RUNBOOK DE S√âCURIT√â - OP√âRATIONS DB CRITIQUES
-- ‚ö†Ô∏è  √Ä LIRE AVANT TOUTE OP√âRATION DESTRUCTIVE
-- Date: 2025-10-16

-- ===============================================
-- 1. R√àGLES D'OR - JAMAIS DE DELETE SANS BACKUP
-- ===============================================

/*
üö´ INTERDICTIONS ABSOLUES:
- DELETE sur vehicle_inspections sans backup complet
- DELETE sur inspection_photos sans v√©rifier CASCADE
- DROP TABLE sur tables de production
- TRUNCATE sur donn√©es utilisateur

‚úÖ PROC√âDURE OBLIGATOIRE AVANT CLEANUP:
1. Cr√©er backup complet
2. Tester sur copie locale
3. V√©rifier les contraintes CASCADE
4. Ex√©cuter avec LIMIT d'abord
5. Confirmer r√©sultat attendu
*/

-- ===============================================
-- 2. BACKUP AVANT OP√âRATION CRITIQUE
-- ===============================================

-- üìã Cr√©er dump complet des tables critiques
\copy (SELECT * FROM vehicle_inspections) TO 'backup_vehicle_inspections_2025-10-16.csv' DELIMITER ',' CSV HEADER;
\copy (SELECT * FROM inspection_photos) TO 'backup_inspection_photos_2025-10-16.csv' DELIMITER ',' CSV HEADER;
\copy (SELECT * FROM missions WHERE status IN ('in_progress', 'completed')) TO 'backup_missions_2025-10-16.csv' DELIMITER ',' CSV HEADER;

-- üìä Compter avant op√©ration
SELECT 
  'BEFORE OPERATION' as moment,
  (SELECT COUNT(*) FROM vehicle_inspections) as inspections_count,
  (SELECT COUNT(*) FROM inspection_photos) as photos_count,
  (SELECT COUNT(*) FROM missions WHERE status = 'completed') as completed_missions;

-- ===============================================
-- 3. V√âRIFICATIONS CASCADE BEFORE DELETE
-- ===============================================

-- üîç Voir quelles photos seraient supprim√©es AVANT DELETE
SELECT 
  vi.id as inspection_id,
  vi.mission_id,
  vi.inspection_type,
  vi.created_at,
  COUNT(ip.id) as photos_count
FROM vehicle_inspections vi
LEFT JOIN inspection_photos ip ON ip.inspection_id = vi.id
WHERE vi.id IN (
  -- üéØ Remplacer par vos crit√®res de suppression
  SELECT id FROM vehicle_inspections 
  WHERE created_at < '2025-01-01' -- EXEMPLE: anciennes inspections
)
GROUP BY vi.id, vi.mission_id, vi.inspection_type, vi.created_at
ORDER BY vi.created_at;

-- ‚ö†Ô∏è ATTENTION: Cette requ√™te montre ce qui serait supprim√© par CASCADE
-- Si photos_count > 0, les photos seront supprim√©es automatiquement !

-- ===============================================
-- 4. CLEANUP S√âCURIS√â AVEC LIMITE
-- ===============================================

-- üîí Version s√©curis√©e: DELETE avec LIMIT et transaction
BEGIN;

-- Test sur 1 seul enregistrement d'abord
DELETE FROM vehicle_inspections 
WHERE id IN (
  SELECT id FROM vehicle_inspections 
  WHERE created_at < '2024-01-01' -- Crit√®re s√©curis√©
  LIMIT 1  -- ‚ö†Ô∏è TOUJOURS LIMIT pour test
);

-- üìä V√©rifier r√©sultat
SELECT 
  'AFTER DELETE LIMIT 1' as moment,
  (SELECT COUNT(*) FROM vehicle_inspections) as inspections_count,
  (SELECT COUNT(*) FROM inspection_photos) as photos_count;

-- ü§î Si r√©sultat OK, COMMIT. Sinon ROLLBACK !
-- COMMIT; -- D√©commentez seulement si satisfait
ROLLBACK; -- S√©curit√© par d√©faut

-- ===============================================
-- 5. RECOVERY EN CAS DE PROBL√àME
-- ===============================================

-- üìÅ Restaurer depuis backup CSV (adapt√© √† votre structure)
/*
COPY vehicle_inspections FROM 'backup_vehicle_inspections_2025-10-16.csv' DELIMITER ',' CSV HEADER;
COPY inspection_photos FROM 'backup_inspection_photos_2025-10-16.csv' DELIMITER ',' CSV HEADER;

-- Ou via Supabase Dashboard:
-- 1. Aller dans Database > Backups
-- 2. Restore to point in time
-- 3. Choisir timestamp AVANT l'op√©ration destructive
*/

-- ===============================================
-- 6. MONITORING POST-OP√âRATION
-- ===============================================

-- üìä V√©rifier int√©grit√© apr√®s op√©ration
SELECT 
  'POST OPERATION CHECK' as status,
  (SELECT COUNT(*) FROM vehicle_inspections) as total_inspections,
  (SELECT COUNT(*) FROM inspection_photos) as total_photos,
  (SELECT COUNT(*) FROM vehicle_inspections WHERE id NOT IN (
    SELECT DISTINCT inspection_id FROM inspection_photos WHERE inspection_id IS NOT NULL
  )) as inspections_without_photos;

-- üîç Trouver inspections orphelines (sans photos)
SELECT 
  vi.id,
  vi.mission_id, 
  vi.inspection_type,
  vi.created_at,
  'NO_PHOTOS' as issue
FROM vehicle_inspections vi
LEFT JOIN inspection_photos ip ON ip.inspection_id = vi.id
WHERE ip.inspection_id IS NULL
  AND vi.status = 'completed'
ORDER BY vi.created_at DESC;

-- üîç Trouver photos orphelines (sans inspection)
SELECT 
  ip.id,
  ip.inspection_id,
  ip.photo_type,
  ip.created_at,
  'ORPHANED_PHOTO' as issue
FROM inspection_photos ip
LEFT JOIN vehicle_inspections vi ON vi.id = ip.inspection_id
WHERE vi.id IS NULL
ORDER BY ip.created_at DESC;

-- ===============================================
-- 7. CHECKLIST PRE-OP√âRATION
-- ===============================================

/*
‚òê Backup cr√©√© et v√©rifi√©
‚òê Contraintes CASCADE analys√©es
‚òê Test sur LIMIT 1 effectu√©
‚òê R√©sultat valid√© par √©quipe
‚òê Rollback plan d√©fini
‚òê Monitoring post-op pr√©par√©

SIGNATURES:
- Dev: ________________
- Lead: _______________
- Date: ______________

‚ö†Ô∏è  NE PAS EX√âCUTER SANS TOUS LES CHECKS
*/
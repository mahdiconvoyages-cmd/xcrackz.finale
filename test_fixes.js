#!/usr/bin/env node

/**
 * Test rapide de nos corrections critiques
 * Usage: node test_fixes.js
 */

import { createReadStream, existsSync } from 'fs';
import { join } from 'path';

const PROJECT_ROOT = process.cwd();

console.log('üîç Test des correctifs appliqu√©s...\n');

// Test 1: V√©rifier que setInspection est d√©clar√©
console.log('1Ô∏è‚É£ Test: State inspection d√©clar√© dans InspectionArrival.tsx');
const inspectionFile = join(PROJECT_ROOT, 'src/pages/InspectionArrival.tsx');

if (existsSync(inspectionFile)) {
  const content = require('fs').readFileSync(inspectionFile, 'utf8');
  
  const hasSetInspection = content.includes('setInspection = useState');
  const hasInspectionState = content.includes('const [inspection, setInspection]');
  
  if (hasInspectionState) {
    console.log('‚úÖ State inspection correctement d√©clar√©');
  } else if (hasSetInspection) {
    console.log('‚ö†Ô∏è  setInspection trouv√© mais state mal d√©clar√©');
  } else {
    console.log('‚ùå State inspection manquant');
  }
} else {
  console.log('‚ùå Fichier InspectionArrival.tsx introuvable');
}

// Test 2: V√©rifier les guards de s√©curit√©
console.log('\n2Ô∏è‚É£ Test: Guards de s√©curit√© dans handleComplete');
if (existsSync(inspectionFile)) {
  const content = require('fs').readFileSync(inspectionFile, 'utf8');
  
  const hasIdGuard = content.includes('if (!arrivalInspection?.id)');
  const hasRetryLogic = content.includes('for (let attempt = 1; attempt <= 2');
  const hasUploadCount = content.includes('uploadedPhotosCount');
  
  console.log(hasIdGuard ? '‚úÖ Guard ID inspection pr√©sent' : '‚ùå Guard ID inspection manquant');
  console.log(hasRetryLogic ? '‚úÖ Logique retry pr√©sente' : '‚ùå Logique retry manquante');
  console.log(hasUploadCount ? '‚úÖ Compteur uploads pr√©sent' : '‚ùå Compteur uploads manquant');
}

// Test 3: V√©rifier les fichiers de s√©curit√© cr√©√©s
console.log('\n3Ô∏è‚É£ Test: Scripts de s√©curit√© cr√©√©s');
const securityFiles = [
  'check_storage_recovery.js',
  'DB_SAFETY_RUNBOOK.sql'
];

securityFiles.forEach(file => {
  const filePath = join(PROJECT_ROOT, file);
  if (existsSync(filePath)) {
    console.log(`‚úÖ ${file} cr√©√©`);
  } else {
    console.log(`‚ùå ${file} manquant`);
  }
});

// Test 4: Compilation rapide (syntaxe)
console.log('\n4Ô∏è‚É£ Test: V√©rification syntaxe basique');
try {
  // V√©rifier juste que le fichier peut √™tre pars√©
  require('@babel/parser').parse(
    require('fs').readFileSync(inspectionFile, 'utf8'),
    {
      sourceType: 'module',
      plugins: ['typescript', 'jsx']
    }
  );
  console.log('‚úÖ Syntaxe JavaScript/TypeScript valide');
} catch (error) {
  console.log('‚ùå Erreur de syntaxe:', error.message);
}

console.log('\nüìä R√âSUM√â DES CORRECTIONS APPLIQU√âES:');
console.log('‚Ä¢ ‚úÖ Ajout state inspection manquant dans InspectionArrival.tsx');
console.log('‚Ä¢ ‚úÖ Ajout guards de s√©curit√© dans handleComplete()');
console.log('‚Ä¢ ‚úÖ Logique retry pour uploads avec compteur de succ√®s');
console.log('‚Ä¢ ‚úÖ Messages d\'erreur d√©taill√©s et logging');
console.log('‚Ä¢ ‚úÖ Script de v√©rification Storage pour r√©cup√©ration photos');
console.log('‚Ä¢ ‚úÖ Runbook de s√©curit√© DB pour √©viter futures suppressions CASCADE');

console.log('\nüéØ PROCHAINES √âTAPES RECOMMAND√âES:');
console.log('1. Ex√©cuter: node check_storage_recovery.js (v√©rifier photos r√©cup√©rables)');
console.log('2. Tester l\'inspection en dev/staging avant production');
console.log('3. Configurer backups automatiques Supabase');
console.log('4. Appliquer m√™me correctifs √† InspectionDeparture.tsx');
console.log('5. Ajouter tests unitaires pour handleComplete()');

console.log('\n‚úÖ Tests termin√©s !');
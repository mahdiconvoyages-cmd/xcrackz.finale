/*
  # Schéma complet FleetCheck - Application de gestion de flotte

  ## Vue d'ensemble
  Ce fichier crée l'ensemble des tables nécessaires pour l'application FleetCheck,
  incluant la gestion des utilisateurs, missions, facturation, covoiturage, 
  inspections, rapports et crédits.

  ## 1. Tables d'authentification et profils
  ### `profiles`
  - Informations utilisateur étendues (nom, prénom, téléphone, etc.)
  - Lié à auth.users via user_id
  
  ## 2. Tables de gestion des missions
  ### `missions`
  - Missions de convoyage de véhicules
  - Statuts: pending, in_progress, completed, cancelled
  
  ### `mission_tracking`
  - Suivi GPS en temps réel des missions
  - Positions géographiques avec horodatage
  
  ## 3. Tables de facturation
  ### `invoices`
  - Factures clients avec lignes d'articles
  - Statuts: draft, sent, paid, overdue
  
  ### `invoice_items`
  - Lignes de facturation détaillées
  
  ### `quotes`
  - Devis clients (nouveauté pour Tiime-style)
  - Conversion possible en factures
  
  ### `quote_items`
  - Lignes de devis
  
  ## 4. Tables de covoiturage
  ### `covoiturage_offers`
  - Offres de covoiturage entre chauffeurs
  - Gestion des places disponibles et prix
  
  ### `covoiturage_bookings`
  - Réservations de trajets
  
  ### `covoiturage_messages`
  - Messagerie entre conducteur et passagers
  
  ### `covoiturage_ratings`
  - Système d'évaluation (comme BlaBlaCar)
  
  ## 5. Tables d'inspection
  ### `inspections`
  - Inspections de véhicules (état avant/après transport)
  - Photos, signatures, rapports PDF
  
  ### `inspection_items`
  - Éléments vérifiés lors de l'inspection
  
  ## 6. Tables de boutique et crédits
  ### `shop_items`
  - Articles disponibles à l'achat (crédits, abonnements)
  
  ### `credit_transactions`
  - Historique des transactions de crédits
  
  ### `user_credits`
  - Solde de crédits par utilisateur
  
  ## 7. Tables diverses
  ### `contacts`
  - Carnet d'adresses des utilisateurs
  
  ### `documents`
  - Documents partagés (rapports d'inspection, factures, etc.)
  
  ### `notifications`
  - Notifications push et in-app
  
  ## Sécurité
  - RLS activé sur toutes les tables
  - Politiques restrictives par défaut
  - Accès basé sur auth.uid()
*/

-- Extension pour génération d'UUID
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Extension pour géolocalisation
CREATE EXTENSION IF NOT EXISTS "postgis";

-- ============================================================================
-- 1. PROFILS UTILISATEURS
-- ============================================================================

CREATE TABLE IF NOT EXISTS profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  first_name text,
  last_name text,
  full_name text GENERATED ALWAYS AS (COALESCE(first_name || ' ' || last_name, email)) STORED,
  phone text,
  avatar_url text,
  company_name text,
  company_siret text,
  company_address text,
  is_admin boolean DEFAULT false,
  is_verified boolean DEFAULT false,
  rating_average decimal(3,2) DEFAULT 0,
  rating_count integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON missions;
DROP POLICY IF EXISTS "Users can view own profile" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own profile" ON invoices;
DROP POLICY IF EXISTS "Users can view own profile" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own profile" ON quotes;
DROP POLICY IF EXISTS "Users can view own profile" ON quote_items;

CREATE POLICY "Users can view own profile"
  ON profiles FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON missions;
DROP POLICY IF EXISTS "Users can update own profile" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own profile" ON invoices;
DROP POLICY IF EXISTS "Users can update own profile" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own profile" ON quotes;
DROP POLICY IF EXISTS "Users can update own profile" ON quote_items;

CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON profiles;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON missions;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON invoices;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON invoice_items;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON quotes;
DROP POLICY IF EXISTS "Users can view other profiles for covoiturage" ON quote_items;

CREATE POLICY "Users can view other profiles for covoiturage"
  ON profiles FOR SELECT
  TO authenticated
  USING (true);

-- ============================================================================
-- 2. MISSIONS DE CONVOYAGE
-- ============================================================================

CREATE TABLE IF NOT EXISTS missions (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  reference text UNIQUE NOT NULL,
  status text DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
  
  -- Informations véhicule
  vehicle_brand text NOT NULL,
  vehicle_model text NOT NULL,
  vehicle_plate text,
  vehicle_vin text,
  vehicle_year integer,
  vehicle_color text,
  
  -- Adresses
  pickup_address text NOT NULL,
  pickup_lat decimal(10, 8),
  pickup_lng decimal(11, 8),
  delivery_address text NOT NULL,
  delivery_lat decimal(10, 8),
  delivery_lng decimal(11, 8),
  
  -- Dates
  pickup_date timestamptz,
  delivery_date timestamptz,
  
  -- Informations client
  client_name text,
  client_phone text,
  client_email text,
  
  -- Financier
  price decimal(10, 2) DEFAULT 0,
  distance_km decimal(10, 2),
  
  -- Divers
  notes text,
  special_instructions text,
  tracking_code text UNIQUE,
  
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_missions_user_id ON missions(user_id);
CREATE INDEX IF NOT EXISTS idx_missions_status ON missions(status);
CREATE INDEX IF NOT EXISTS idx_missions_tracking_code ON missions(tracking_code);

ALTER TABLE missions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own missions" ON profiles;
DROP POLICY IF EXISTS "Users can view own missions" ON missions;
DROP POLICY IF EXISTS "Users can view own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own missions" ON invoices;
DROP POLICY IF EXISTS "Users can view own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own missions" ON quotes;
DROP POLICY IF EXISTS "Users can view own missions" ON quote_items;

CREATE POLICY "Users can view own missions"
  ON missions FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create own missions" ON profiles;
DROP POLICY IF EXISTS "Users can create own missions" ON missions;
DROP POLICY IF EXISTS "Users can create own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create own missions" ON invoices;
DROP POLICY IF EXISTS "Users can create own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can create own missions" ON quotes;
DROP POLICY IF EXISTS "Users can create own missions" ON quote_items;

CREATE POLICY "Users can create own missions"
  ON missions FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own missions" ON profiles;
DROP POLICY IF EXISTS "Users can update own missions" ON missions;
DROP POLICY IF EXISTS "Users can update own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own missions" ON invoices;
DROP POLICY IF EXISTS "Users can update own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own missions" ON quotes;
DROP POLICY IF EXISTS "Users can update own missions" ON quote_items;

CREATE POLICY "Users can update own missions"
  ON missions FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Public can view missions with tracking code" ON profiles;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON missions;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON mission_tracking;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON invoices;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON invoice_items;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON quotes;
DROP POLICY IF EXISTS "Public can view missions with tracking code" ON quote_items;

CREATE POLICY "Public can view missions with tracking code"
  ON missions FOR SELECT
  TO anon
  USING (tracking_code IS NOT NULL);

-- ============================================================================
-- 3. SUIVI GPS DES MISSIONS
-- ============================================================================

CREATE TABLE IF NOT EXISTS mission_tracking (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  mission_id uuid REFERENCES missions(id) ON DELETE CASCADE NOT NULL,
  latitude decimal(10, 8) NOT NULL,
  longitude decimal(11, 8) NOT NULL,
  accuracy decimal(10, 2),
  speed decimal(10, 2),
  heading decimal(5, 2),
  altitude decimal(10, 2),
  recorded_at timestamptz DEFAULT now(),
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_mission_tracking_mission_id ON mission_tracking(mission_id);
CREATE INDEX IF NOT EXISTS idx_mission_tracking_recorded_at ON mission_tracking(recorded_at);

ALTER TABLE mission_tracking ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view tracking for own missions" ON profiles;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON missions;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON invoices;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON quotes;
DROP POLICY IF EXISTS "Users can view tracking for own missions" ON quote_items;

CREATE POLICY "Users can view tracking for own missions"
  ON mission_tracking FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM missions
      WHERE missions.id = mission_tracking.mission_id
      AND missions.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON profiles;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON missions;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON invoices;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON quotes;
DROP POLICY IF EXISTS "Users can insert tracking for own missions" ON quote_items;

CREATE POLICY "Users can insert tracking for own missions"
  ON mission_tracking FOR INSERT
  TO authenticated
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM missions
      WHERE missions.id = mission_tracking.mission_id
      AND missions.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Public can view tracking with code" ON profiles;
DROP POLICY IF EXISTS "Public can view tracking with code" ON missions;
DROP POLICY IF EXISTS "Public can view tracking with code" ON mission_tracking;
DROP POLICY IF EXISTS "Public can view tracking with code" ON invoices;
DROP POLICY IF EXISTS "Public can view tracking with code" ON invoice_items;
DROP POLICY IF EXISTS "Public can view tracking with code" ON quotes;
DROP POLICY IF EXISTS "Public can view tracking with code" ON quote_items;

CREATE POLICY "Public can view tracking with code"
  ON mission_tracking FOR SELECT
  TO anon
  USING (
    EXISTS (
      SELECT 1 FROM missions
      WHERE missions.id = mission_tracking.mission_id
      AND missions.tracking_code IS NOT NULL
    )
  );

-- ============================================================================
-- 4. FACTURATION - FACTURES
-- ============================================================================

CREATE TABLE IF NOT EXISTS invoices (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  invoice_number text UNIQUE NOT NULL,
  
  -- Client
  client_name text NOT NULL,
  client_email text,
  client_phone text,
  client_address text,
  client_siret text,
  
  -- Dates
  issue_date date NOT NULL DEFAULT CURRENT_DATE,
  due_date date,
  paid_date date,
  
  -- Montants
  subtotal decimal(10, 2) NOT NULL DEFAULT 0,
  tax_rate decimal(5, 2) DEFAULT 20,
  tax_amount decimal(10, 2) DEFAULT 0,
  discount_amount decimal(10, 2) DEFAULT 0,
  total decimal(10, 2) NOT NULL DEFAULT 0,
  
  -- Statut et notes
  status text DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'paid', 'overdue', 'cancelled')),
  notes text,
  payment_terms text,
  
  -- Metadata
  pdf_url text,
  mission_id uuid REFERENCES missions(id) ON DELETE SET NULL,
  
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_invoices_user_id ON invoices(user_id);
CREATE INDEX IF NOT EXISTS idx_invoices_status ON invoices(status);

ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own invoices" ON profiles;
DROP POLICY IF EXISTS "Users can view own invoices" ON missions;
DROP POLICY IF EXISTS "Users can view own invoices" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can view own invoices" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own invoices" ON quotes;
DROP POLICY IF EXISTS "Users can view own invoices" ON quote_items;

CREATE POLICY "Users can view own invoices"
  ON invoices FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create own invoices" ON profiles;
DROP POLICY IF EXISTS "Users can create own invoices" ON missions;
DROP POLICY IF EXISTS "Users can create own invoices" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can create own invoices" ON invoice_items;
DROP POLICY IF EXISTS "Users can create own invoices" ON quotes;
DROP POLICY IF EXISTS "Users can create own invoices" ON quote_items;

CREATE POLICY "Users can create own invoices"
  ON invoices FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own invoices" ON profiles;
DROP POLICY IF EXISTS "Users can update own invoices" ON missions;
DROP POLICY IF EXISTS "Users can update own invoices" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own invoices" ON invoices;
DROP POLICY IF EXISTS "Users can update own invoices" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own invoices" ON quotes;
DROP POLICY IF EXISTS "Users can update own invoices" ON quote_items;

CREATE POLICY "Users can update own invoices"
  ON invoices FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 5. FACTURATION - LIGNES DE FACTURES
-- ============================================================================

CREATE TABLE IF NOT EXISTS invoice_items (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  invoice_id uuid REFERENCES invoices(id) ON DELETE CASCADE NOT NULL,
  description text NOT NULL,
  quantity decimal(10, 2) DEFAULT 1,
  unit_price decimal(10, 2) NOT NULL,
  tax_rate decimal(5, 2) DEFAULT 20,
  amount decimal(10, 2) NOT NULL,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_invoice_items_invoice_id ON invoice_items(invoice_id);

ALTER TABLE invoice_items ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own invoice items" ON profiles;
DROP POLICY IF EXISTS "Users can view own invoice items" ON missions;
DROP POLICY IF EXISTS "Users can view own invoice items" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own invoice items" ON invoices;
DROP POLICY IF EXISTS "Users can view own invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own invoice items" ON quotes;
DROP POLICY IF EXISTS "Users can view own invoice items" ON quote_items;

CREATE POLICY "Users can view own invoice items"
  ON invoice_items FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM invoices
      WHERE invoices.id = invoice_items.invoice_id
      AND invoices.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can manage own invoice items" ON profiles;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON missions;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON mission_tracking;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON invoices;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON invoice_items;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON quotes;
DROP POLICY IF EXISTS "Users can manage own invoice items" ON quote_items;

CREATE POLICY "Users can manage own invoice items"
  ON invoice_items FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM invoices
      WHERE invoices.id = invoice_items.invoice_id
      AND invoices.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM invoices
      WHERE invoices.id = invoice_items.invoice_id
      AND invoices.user_id = auth.uid()
    )
  );

-- ============================================================================
-- 6. DEVIS (QUOTES)
-- ============================================================================

CREATE TABLE IF NOT EXISTS quotes (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  quote_number text UNIQUE NOT NULL,
  
  -- Client
  client_name text NOT NULL,
  client_email text,
  client_phone text,
  client_address text,
  client_siret text,
  
  -- Dates
  issue_date date NOT NULL DEFAULT CURRENT_DATE,
  valid_until date,
  
  -- Montants
  subtotal decimal(10, 2) NOT NULL DEFAULT 0,
  tax_rate decimal(5, 2) DEFAULT 20,
  tax_amount decimal(10, 2) DEFAULT 0,
  discount_amount decimal(10, 2) DEFAULT 0,
  total decimal(10, 2) NOT NULL DEFAULT 0,
  
  -- Statut
  status text DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'accepted', 'rejected', 'expired')),
  notes text,
  
  -- Conversion
  converted_to_invoice_id uuid REFERENCES invoices(id) ON DELETE SET NULL,
  pdf_url text,
  
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_quotes_user_id ON quotes(user_id);
CREATE INDEX IF NOT EXISTS idx_quotes_status ON quotes(status);

ALTER TABLE quotes ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own quotes" ON profiles;
DROP POLICY IF EXISTS "Users can view own quotes" ON missions;
DROP POLICY IF EXISTS "Users can view own quotes" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own quotes" ON invoices;
DROP POLICY IF EXISTS "Users can view own quotes" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own quotes" ON quotes;
DROP POLICY IF EXISTS "Users can view own quotes" ON quote_items;

CREATE POLICY "Users can view own quotes"
  ON quotes FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create own quotes" ON profiles;
DROP POLICY IF EXISTS "Users can create own quotes" ON missions;
DROP POLICY IF EXISTS "Users can create own quotes" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create own quotes" ON invoices;
DROP POLICY IF EXISTS "Users can create own quotes" ON invoice_items;
DROP POLICY IF EXISTS "Users can create own quotes" ON quotes;
DROP POLICY IF EXISTS "Users can create own quotes" ON quote_items;

CREATE POLICY "Users can create own quotes"
  ON quotes FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own quotes" ON profiles;
DROP POLICY IF EXISTS "Users can update own quotes" ON missions;
DROP POLICY IF EXISTS "Users can update own quotes" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own quotes" ON invoices;
DROP POLICY IF EXISTS "Users can update own quotes" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own quotes" ON quotes;
DROP POLICY IF EXISTS "Users can update own quotes" ON quote_items;

CREATE POLICY "Users can update own quotes"
  ON quotes FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 7. LIGNES DE DEVIS
-- ============================================================================

CREATE TABLE IF NOT EXISTS quote_items (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  quote_id uuid REFERENCES quotes(id) ON DELETE CASCADE NOT NULL,
  description text NOT NULL,
  quantity decimal(10, 2) DEFAULT 1,
  unit_price decimal(10, 2) NOT NULL,
  tax_rate decimal(5, 2) DEFAULT 20,
  amount decimal(10, 2) NOT NULL,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_quote_items_quote_id ON quote_items(quote_id);

ALTER TABLE quote_items ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own quote items" ON profiles;
DROP POLICY IF EXISTS "Users can view own quote items" ON missions;
DROP POLICY IF EXISTS "Users can view own quote items" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own quote items" ON invoices;
DROP POLICY IF EXISTS "Users can view own quote items" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own quote items" ON quotes;
DROP POLICY IF EXISTS "Users can view own quote items" ON quote_items;

CREATE POLICY "Users can view own quote items"
  ON quote_items FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM quotes
      WHERE quotes.id = quote_items.quote_id
      AND quotes.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can manage own quote items" ON profiles;
DROP POLICY IF EXISTS "Users can manage own quote items" ON missions;
DROP POLICY IF EXISTS "Users can manage own quote items" ON mission_tracking;
DROP POLICY IF EXISTS "Users can manage own quote items" ON invoices;
DROP POLICY IF EXISTS "Users can manage own quote items" ON invoice_items;
DROP POLICY IF EXISTS "Users can manage own quote items" ON quotes;
DROP POLICY IF EXISTS "Users can manage own quote items" ON quote_items;

CREATE POLICY "Users can manage own quote items"
  ON quote_items FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM quotes
      WHERE quotes.id = quote_items.quote_id
      AND quotes.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM quotes
      WHERE quotes.id = quote_items.quote_id
      AND quotes.user_id = auth.uid()
    )
  );

-- ============================================================================
-- 8. COVOITURAGE - OFFRES
-- ============================================================================

CREATE TABLE IF NOT EXISTS covoiturage_offers (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  
  -- Trajet
  departure_address text NOT NULL,
  departure_lat decimal(10, 8),
  departure_lng decimal(11, 8),
  arrival_address text NOT NULL,
  arrival_lat decimal(10, 8),
  arrival_lng decimal(11, 8),
  
  -- Date et places
  departure_date timestamptz NOT NULL,
  available_seats integer NOT NULL CHECK (available_seats > 0),
  total_seats integer NOT NULL DEFAULT 3,
  price_per_seat decimal(10, 2) NOT NULL DEFAULT 0,
  
  -- Préférences
  instant_booking boolean DEFAULT true,
  smoking_allowed boolean DEFAULT false,
  pets_allowed boolean DEFAULT false,
  music_preferences text,
  
  -- Statut
  status text DEFAULT 'available' CHECK (status IN ('available', 'full', 'completed', 'cancelled')),
  notes text,
  
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_covoiturage_offers_user_id ON covoiturage_offers(user_id);
CREATE INDEX IF NOT EXISTS idx_covoiturage_offers_status ON covoiturage_offers(status);
CREATE INDEX IF NOT EXISTS idx_covoiturage_offers_departure_date ON covoiturage_offers(departure_date);

ALTER TABLE covoiturage_offers ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Anyone can view available offers" ON profiles;
DROP POLICY IF EXISTS "Anyone can view available offers" ON missions;
DROP POLICY IF EXISTS "Anyone can view available offers" ON mission_tracking;
DROP POLICY IF EXISTS "Anyone can view available offers" ON invoices;
DROP POLICY IF EXISTS "Anyone can view available offers" ON invoice_items;
DROP POLICY IF EXISTS "Anyone can view available offers" ON quotes;
DROP POLICY IF EXISTS "Anyone can view available offers" ON quote_items;

CREATE POLICY "Anyone can view available offers"
  ON covoiturage_offers FOR SELECT
  TO authenticated
  USING (status IN ('available', 'full'));

DROP POLICY IF EXISTS "Users can create own offers" ON profiles;
DROP POLICY IF EXISTS "Users can create own offers" ON missions;
DROP POLICY IF EXISTS "Users can create own offers" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create own offers" ON invoices;
DROP POLICY IF EXISTS "Users can create own offers" ON invoice_items;
DROP POLICY IF EXISTS "Users can create own offers" ON quotes;
DROP POLICY IF EXISTS "Users can create own offers" ON quote_items;

CREATE POLICY "Users can create own offers"
  ON covoiturage_offers FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own offers" ON profiles;
DROP POLICY IF EXISTS "Users can update own offers" ON missions;
DROP POLICY IF EXISTS "Users can update own offers" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own offers" ON invoices;
DROP POLICY IF EXISTS "Users can update own offers" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own offers" ON quotes;
DROP POLICY IF EXISTS "Users can update own offers" ON quote_items;

CREATE POLICY "Users can update own offers"
  ON covoiturage_offers FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 9. COVOITURAGE - RÉSERVATIONS
-- ============================================================================

CREATE TABLE IF NOT EXISTS covoiturage_bookings (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  offer_id uuid REFERENCES covoiturage_offers(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  seats_booked integer NOT NULL CHECK (seats_booked > 0),
  total_price decimal(10, 2) NOT NULL,
  status text DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled', 'completed')),
  pickup_point text,
  notes text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(offer_id, user_id)
);

CREATE INDEX IF NOT EXISTS idx_covoiturage_bookings_offer_id ON covoiturage_bookings(offer_id);
CREATE INDEX IF NOT EXISTS idx_covoiturage_bookings_user_id ON covoiturage_bookings(user_id);

ALTER TABLE covoiturage_bookings ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own bookings" ON profiles;
DROP POLICY IF EXISTS "Users can view own bookings" ON missions;
DROP POLICY IF EXISTS "Users can view own bookings" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own bookings" ON invoices;
DROP POLICY IF EXISTS "Users can view own bookings" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own bookings" ON quotes;
DROP POLICY IF EXISTS "Users can view own bookings" ON quote_items;

CREATE POLICY "Users can view own bookings"
  ON covoiturage_bookings FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON profiles;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON missions;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON mission_tracking;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON invoices;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON invoice_items;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON quotes;
DROP POLICY IF EXISTS "Drivers can view bookings for their offers" ON quote_items;

CREATE POLICY "Drivers can view bookings for their offers"
  ON covoiturage_bookings FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM covoiturage_offers
      WHERE covoiturage_offers.id = covoiturage_bookings.offer_id
      AND covoiturage_offers.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can create bookings" ON profiles;
DROP POLICY IF EXISTS "Users can create bookings" ON missions;
DROP POLICY IF EXISTS "Users can create bookings" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create bookings" ON invoices;
DROP POLICY IF EXISTS "Users can create bookings" ON invoice_items;
DROP POLICY IF EXISTS "Users can create bookings" ON quotes;
DROP POLICY IF EXISTS "Users can create bookings" ON quote_items;

CREATE POLICY "Users can create bookings"
  ON covoiturage_bookings FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own bookings" ON profiles;
DROP POLICY IF EXISTS "Users can update own bookings" ON missions;
DROP POLICY IF EXISTS "Users can update own bookings" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own bookings" ON invoices;
DROP POLICY IF EXISTS "Users can update own bookings" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own bookings" ON quotes;
DROP POLICY IF EXISTS "Users can update own bookings" ON quote_items;

CREATE POLICY "Users can update own bookings"
  ON covoiturage_bookings FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 10. COVOITURAGE - MESSAGES
-- ============================================================================

CREATE TABLE IF NOT EXISTS covoiturage_messages (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  offer_id uuid REFERENCES covoiturage_offers(id) ON DELETE CASCADE NOT NULL,
  sender_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  receiver_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  message text NOT NULL,
  is_read boolean DEFAULT false,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_covoiturage_messages_offer_id ON covoiturage_messages(offer_id);
CREATE INDEX IF NOT EXISTS idx_covoiturage_messages_sender_id ON covoiturage_messages(sender_id);
CREATE INDEX IF NOT EXISTS idx_covoiturage_messages_receiver_id ON covoiturage_messages(receiver_id);

ALTER TABLE covoiturage_messages ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view messages they sent or received" ON profiles;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON missions;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON invoices;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON invoice_items;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON quotes;
DROP POLICY IF EXISTS "Users can view messages they sent or received" ON quote_items;

CREATE POLICY "Users can view messages they sent or received"
  ON covoiturage_messages FOR SELECT
  TO authenticated
  USING (auth.uid() = sender_id OR auth.uid() = receiver_id);

DROP POLICY IF EXISTS "Users can send messages" ON profiles;
DROP POLICY IF EXISTS "Users can send messages" ON missions;
DROP POLICY IF EXISTS "Users can send messages" ON mission_tracking;
DROP POLICY IF EXISTS "Users can send messages" ON invoices;
DROP POLICY IF EXISTS "Users can send messages" ON invoice_items;
DROP POLICY IF EXISTS "Users can send messages" ON quotes;
DROP POLICY IF EXISTS "Users can send messages" ON quote_items;

CREATE POLICY "Users can send messages"
  ON covoiturage_messages FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = sender_id);

DROP POLICY IF EXISTS "Users can update messages they received" ON profiles;
DROP POLICY IF EXISTS "Users can update messages they received" ON missions;
DROP POLICY IF EXISTS "Users can update messages they received" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update messages they received" ON invoices;
DROP POLICY IF EXISTS "Users can update messages they received" ON invoice_items;
DROP POLICY IF EXISTS "Users can update messages they received" ON quotes;
DROP POLICY IF EXISTS "Users can update messages they received" ON quote_items;

CREATE POLICY "Users can update messages they received"
  ON covoiturage_messages FOR UPDATE
  TO authenticated
  USING (auth.uid() = receiver_id)
  WITH CHECK (auth.uid() = receiver_id);

-- ============================================================================
-- 11. COVOITURAGE - ÉVALUATIONS
-- ============================================================================

CREATE TABLE IF NOT EXISTS covoiturage_ratings (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  booking_id uuid REFERENCES covoiturage_bookings(id) ON DELETE CASCADE NOT NULL,
  rater_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  rated_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment text,
  created_at timestamptz DEFAULT now(),
  UNIQUE(booking_id, rater_id)
);

CREATE INDEX IF NOT EXISTS idx_covoiturage_ratings_rated_id ON covoiturage_ratings(rated_id);

ALTER TABLE covoiturage_ratings ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Anyone can view ratings" ON profiles;
DROP POLICY IF EXISTS "Anyone can view ratings" ON missions;
DROP POLICY IF EXISTS "Anyone can view ratings" ON mission_tracking;
DROP POLICY IF EXISTS "Anyone can view ratings" ON invoices;
DROP POLICY IF EXISTS "Anyone can view ratings" ON invoice_items;
DROP POLICY IF EXISTS "Anyone can view ratings" ON quotes;
DROP POLICY IF EXISTS "Anyone can view ratings" ON quote_items;

CREATE POLICY "Anyone can view ratings"
  ON covoiturage_ratings FOR SELECT
  TO authenticated
  USING (true);

DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON profiles;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON missions;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON invoices;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON invoice_items;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON quotes;
DROP POLICY IF EXISTS "Users can create ratings for completed bookings" ON quote_items;

CREATE POLICY "Users can create ratings for completed bookings"
  ON covoiturage_ratings FOR INSERT
  TO authenticated
  WITH CHECK (
    auth.uid() = rater_id AND
    EXISTS (
      SELECT 1 FROM covoiturage_bookings
      WHERE covoiturage_bookings.id = covoiturage_ratings.booking_id
      AND covoiturage_bookings.status = 'completed'
      AND (covoiturage_bookings.user_id = auth.uid() OR 
           EXISTS (
             SELECT 1 FROM covoiturage_offers
             WHERE covoiturage_offers.id = covoiturage_bookings.offer_id
             AND covoiturage_offers.user_id = auth.uid()
           ))
    )
  );

-- ============================================================================
-- 12. INSPECTIONS DE VÉHICULES
-- ============================================================================

CREATE TABLE IF NOT EXISTS inspections (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  mission_id uuid REFERENCES missions(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  inspection_type text NOT NULL CHECK (inspection_type IN ('pickup', 'delivery')),
  
  -- État général
  overall_condition text,
  mileage integer,
  fuel_level integer CHECK (fuel_level >= 0 AND fuel_level <= 100),
  
  -- Dommages
  has_damages boolean DEFAULT false,
  damage_description text,
  
  -- Médias
  photos jsonb DEFAULT '[]'::jsonb,
  signature_url text,
  
  -- Rapport PDF
  pdf_url text,
  pdf_generated_at timestamptz,
  
  -- Notes
  notes text,
  
  -- Localisation
  latitude decimal(10, 8),
  longitude decimal(11, 8),
  
  created_at timestamptz DEFAULT now(),
  completed_at timestamptz,
  
  UNIQUE(mission_id, inspection_type)
);

CREATE INDEX IF NOT EXISTS idx_inspections_mission_id ON inspections(mission_id);
CREATE INDEX IF NOT EXISTS idx_inspections_user_id ON inspections(user_id);

ALTER TABLE inspections ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view inspections for own missions" ON profiles;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON missions;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON invoices;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON quotes;
DROP POLICY IF EXISTS "Users can view inspections for own missions" ON quote_items;

CREATE POLICY "Users can view inspections for own missions"
  ON inspections FOR SELECT
  TO authenticated
  USING (
    auth.uid() = user_id OR
    EXISTS (
      SELECT 1 FROM missions
      WHERE missions.id = inspections.mission_id
      AND missions.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can create inspections for own missions" ON profiles;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON missions;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON invoices;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON invoice_items;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON quotes;
DROP POLICY IF EXISTS "Users can create inspections for own missions" ON quote_items;

CREATE POLICY "Users can create inspections for own missions"
  ON inspections FOR INSERT
  TO authenticated
  WITH CHECK (
    auth.uid() = user_id AND
    EXISTS (
      SELECT 1 FROM missions
      WHERE missions.id = inspections.mission_id
      AND missions.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can update own inspections" ON profiles;
DROP POLICY IF EXISTS "Users can update own inspections" ON missions;
DROP POLICY IF EXISTS "Users can update own inspections" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own inspections" ON invoices;
DROP POLICY IF EXISTS "Users can update own inspections" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own inspections" ON quotes;
DROP POLICY IF EXISTS "Users can update own inspections" ON quote_items;

CREATE POLICY "Users can update own inspections"
  ON inspections FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 13. ÉLÉMENTS D'INSPECTION
-- ============================================================================

CREATE TABLE IF NOT EXISTS inspection_items (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  inspection_id uuid REFERENCES inspections(id) ON DELETE CASCADE NOT NULL,
  category text NOT NULL,
  item_name text NOT NULL,
  status text NOT NULL CHECK (status IN ('ok', 'warning', 'critical', 'not_checked')),
  notes text,
  photo_url text,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_inspection_items_inspection_id ON inspection_items(inspection_id);

ALTER TABLE inspection_items ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON profiles;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON missions;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON invoices;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON invoice_items;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON quotes;
DROP POLICY IF EXISTS "Users can view items for accessible inspections" ON quote_items;

CREATE POLICY "Users can view items for accessible inspections"
  ON inspection_items FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM inspections
      WHERE inspections.id = inspection_items.inspection_id
      AND (inspections.user_id = auth.uid() OR
           EXISTS (
             SELECT 1 FROM missions
             WHERE missions.id = inspections.mission_id
             AND missions.user_id = auth.uid()
           ))
    )
  );

DROP POLICY IF EXISTS "Users can manage items for own inspections" ON profiles;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON missions;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON mission_tracking;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON invoices;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON invoice_items;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON quotes;
DROP POLICY IF EXISTS "Users can manage items for own inspections" ON quote_items;

CREATE POLICY "Users can manage items for own inspections"
  ON inspection_items FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM inspections
      WHERE inspections.id = inspection_items.inspection_id
      AND inspections.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM inspections
      WHERE inspections.id = inspection_items.inspection_id
      AND inspections.user_id = auth.uid()
    )
  );

-- ============================================================================
-- 14. BOUTIQUE - ARTICLES
-- ============================================================================

CREATE TABLE IF NOT EXISTS shop_items (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  description text,
  item_type text NOT NULL CHECK (item_type IN ('credits', 'subscription', 'feature')),
  credits_amount integer DEFAULT 0,
  price decimal(10, 2) NOT NULL,
  currency text DEFAULT 'EUR',
  is_active boolean DEFAULT true,
  features jsonb DEFAULT '[]'::jsonb,
  display_order integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE shop_items ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Anyone can view active shop items" ON profiles;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON missions;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON mission_tracking;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON invoices;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON invoice_items;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON quotes;
DROP POLICY IF EXISTS "Anyone can view active shop items" ON quote_items;

CREATE POLICY "Anyone can view active shop items"
  ON shop_items FOR SELECT
  TO authenticated
  USING (is_active = true);

-- ============================================================================
-- 15. CRÉDITS UTILISATEURS
-- ============================================================================

CREATE TABLE IF NOT EXISTS user_credits (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL UNIQUE,
  balance integer DEFAULT 0 CHECK (balance >= 0),
  total_earned integer DEFAULT 0,
  total_spent integer DEFAULT 0,
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE user_credits ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own credits" ON profiles;
DROP POLICY IF EXISTS "Users can view own credits" ON missions;
DROP POLICY IF EXISTS "Users can view own credits" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own credits" ON invoices;
DROP POLICY IF EXISTS "Users can view own credits" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own credits" ON quotes;
DROP POLICY IF EXISTS "Users can view own credits" ON quote_items;

CREATE POLICY "Users can view own credits"
  ON user_credits FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- ============================================================================
-- 16. TRANSACTIONS DE CRÉDITS
-- ============================================================================

CREATE TABLE IF NOT EXISTS credit_transactions (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  transaction_type text NOT NULL CHECK (transaction_type IN ('purchase', 'earn', 'spend', 'refund')),
  amount integer NOT NULL,
  balance_after integer NOT NULL,
  description text,
  reference_id uuid,
  reference_type text,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_credit_transactions_user_id ON credit_transactions(user_id);

ALTER TABLE credit_transactions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own transactions" ON profiles;
DROP POLICY IF EXISTS "Users can view own transactions" ON missions;
DROP POLICY IF EXISTS "Users can view own transactions" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own transactions" ON invoices;
DROP POLICY IF EXISTS "Users can view own transactions" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own transactions" ON quotes;
DROP POLICY IF EXISTS "Users can view own transactions" ON quote_items;

CREATE POLICY "Users can view own transactions"
  ON credit_transactions FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- ============================================================================
-- 17. CONTACTS
-- ============================================================================

CREATE TABLE IF NOT EXISTS contacts (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  name text NOT NULL,
  company text,
  email text,
  phone text,
  address text,
  notes text,
  category text DEFAULT 'client' CHECK (category IN ('client', 'supplier', 'partner', 'other')),
  is_favorite boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_contacts_user_id ON contacts(user_id);

ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can manage own contacts" ON profiles;
DROP POLICY IF EXISTS "Users can manage own contacts" ON missions;
DROP POLICY IF EXISTS "Users can manage own contacts" ON mission_tracking;
DROP POLICY IF EXISTS "Users can manage own contacts" ON invoices;
DROP POLICY IF EXISTS "Users can manage own contacts" ON invoice_items;
DROP POLICY IF EXISTS "Users can manage own contacts" ON quotes;
DROP POLICY IF EXISTS "Users can manage own contacts" ON quote_items;

CREATE POLICY "Users can manage own contacts"
  ON contacts FOR ALL
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- 18. DOCUMENTS
-- ============================================================================

CREATE TABLE IF NOT EXISTS documents (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  mission_id uuid REFERENCES missions(id) ON DELETE SET NULL,
  inspection_id uuid REFERENCES inspections(id) ON DELETE SET NULL,
  document_type text NOT NULL CHECK (document_type IN ('inspection_report', 'invoice', 'quote', 'photo', 'signature', 'other')),
  file_name text NOT NULL,
  file_url text NOT NULL,
  file_size integer,
  mime_type text,
  description text,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents(user_id);
CREATE INDEX IF NOT EXISTS idx_documents_mission_id ON documents(mission_id);
CREATE INDEX IF NOT EXISTS idx_documents_inspection_id ON documents(inspection_id);

ALTER TABLE documents ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own documents" ON profiles;
DROP POLICY IF EXISTS "Users can view own documents" ON missions;
DROP POLICY IF EXISTS "Users can view own documents" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own documents" ON invoices;
DROP POLICY IF EXISTS "Users can view own documents" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own documents" ON quotes;
DROP POLICY IF EXISTS "Users can view own documents" ON quote_items;

CREATE POLICY "Users can view own documents"
  ON documents FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create own documents" ON profiles;
DROP POLICY IF EXISTS "Users can create own documents" ON missions;
DROP POLICY IF EXISTS "Users can create own documents" ON mission_tracking;
DROP POLICY IF EXISTS "Users can create own documents" ON invoices;
DROP POLICY IF EXISTS "Users can create own documents" ON invoice_items;
DROP POLICY IF EXISTS "Users can create own documents" ON quotes;
DROP POLICY IF EXISTS "Users can create own documents" ON quote_items;

CREATE POLICY "Users can create own documents"
  ON documents FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete own documents" ON profiles;
DROP POLICY IF EXISTS "Users can delete own documents" ON missions;
DROP POLICY IF EXISTS "Users can delete own documents" ON mission_tracking;
DROP POLICY IF EXISTS "Users can delete own documents" ON invoices;
DROP POLICY IF EXISTS "Users can delete own documents" ON invoice_items;
DROP POLICY IF EXISTS "Users can delete own documents" ON quotes;
DROP POLICY IF EXISTS "Users can delete own documents" ON quote_items;

CREATE POLICY "Users can delete own documents"
  ON documents FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- ============================================================================
-- 19. NOTIFICATIONS
-- ============================================================================

CREATE TABLE IF NOT EXISTS notifications (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  notification_type text NOT NULL CHECK (notification_type IN ('mission', 'covoiturage', 'invoice', 'system', 'other')),
  is_read boolean DEFAULT false,
  action_url text,
  reference_id uuid,
  reference_type text,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON notifications(is_read);

ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own notifications" ON profiles;
DROP POLICY IF EXISTS "Users can view own notifications" ON missions;
DROP POLICY IF EXISTS "Users can view own notifications" ON mission_tracking;
DROP POLICY IF EXISTS "Users can view own notifications" ON invoices;
DROP POLICY IF EXISTS "Users can view own notifications" ON invoice_items;
DROP POLICY IF EXISTS "Users can view own notifications" ON quotes;
DROP POLICY IF EXISTS "Users can view own notifications" ON quote_items;

CREATE POLICY "Users can view own notifications"
  ON notifications FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update own notifications" ON profiles;
DROP POLICY IF EXISTS "Users can update own notifications" ON missions;
DROP POLICY IF EXISTS "Users can update own notifications" ON mission_tracking;
DROP POLICY IF EXISTS "Users can update own notifications" ON invoices;
DROP POLICY IF EXISTS "Users can update own notifications" ON invoice_items;
DROP POLICY IF EXISTS "Users can update own notifications" ON quotes;
DROP POLICY IF EXISTS "Users can update own notifications" ON quote_items;

CREATE POLICY "Users can update own notifications"
  ON notifications FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- FONCTIONS ET TRIGGERS
-- ============================================================================

-- Fonction pour mettre à jour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers pour updated_at
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_missions_updated_at BEFORE UPDATE ON missions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_invoices_updated_at BEFORE UPDATE ON invoices
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_quotes_updated_at BEFORE UPDATE ON quotes
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_covoiturage_offers_updated_at BEFORE UPDATE ON covoiturage_offers
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_covoiturage_bookings_updated_at BEFORE UPDATE ON covoiturage_bookings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Fonction pour créer un profil automatiquement lors de l'inscription
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, first_name, last_name)
  VALUES (
    NEW.id,
    NEW.email,
    NEW.raw_user_meta_data->>'first_name',
    NEW.raw_user_meta_data->>'last_name'
  );
  
  INSERT INTO public.user_credits (user_id, balance)
  VALUES (NEW.id, 0);
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger pour créer le profil
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Fonction pour mettre à jour les notes moyennes
CREATE OR REPLACE FUNCTION update_user_rating()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE profiles
  SET 
    rating_average = (
      SELECT AVG(rating)::decimal(3,2)
      FROM covoiturage_ratings
      WHERE rated_id = NEW.rated_id
    ),
    rating_count = (
      SELECT COUNT(*)
      FROM covoiturage_ratings
      WHERE rated_id = NEW.rated_id
    )
  WHERE id = NEW.rated_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_rating_after_insert
  AFTER INSERT ON covoiturage_ratings
  FOR EACH ROW EXECUTE FUNCTION update_user_rating();
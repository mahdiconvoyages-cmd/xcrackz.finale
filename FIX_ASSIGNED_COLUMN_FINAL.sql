-- ============================================
-- FIX FINAL: R√©soudre le probl√®me de colonne assigned
-- ============================================

-- √âTAPE 1: Voir exactement quelles colonnes existent
SELECT 
    'üìã Colonnes d''assignation dans missions:' as info,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns
WHERE table_schema = 'public'
AND table_name = 'missions'
AND (column_name LIKE '%assign%' OR column_name LIKE '%driver%')
ORDER BY column_name;

-- √âTAPE 2: Diagnostiquer le probl√®me
DO $$
DECLARE
    v_has_assigned_to boolean;
    v_has_assigned boolean;
BEGIN
    -- V√©rifier assigned_to_user_id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'missions' 
        AND column_name = 'assigned_to_user_id'
    ) INTO v_has_assigned_to;
    
    -- V√©rifier assigned_user_id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'missions' 
        AND column_name = 'assigned_user_id'
    ) INTO v_has_assigned;
    
    RAISE NOTICE '========================================';
    RAISE NOTICE 'DIAGNOSTIC DES COLONNES:';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'assigned_to_user_id existe: %', v_has_assigned_to;
    RAISE NOTICE 'assigned_user_id existe: %', v_has_assigned;
    RAISE NOTICE '========================================';
    
    -- Solution selon le cas
    IF v_has_assigned_to AND v_has_assigned THEN
        RAISE NOTICE '‚ö†Ô∏è  Les DEUX colonnes existent! On va fusionner.';
    ELSIF v_has_assigned_to THEN
        RAISE NOTICE '‚úÖ assigned_to_user_id existe, on l''utilise';
    ELSIF v_has_assigned THEN
        RAISE NOTICE '‚ö†Ô∏è  Seulement assigned_user_id existe, on va cr√©er assigned_to_user_id';
    ELSE
        RAISE NOTICE '‚ùå AUCUNE colonne n''existe! On va cr√©er assigned_to_user_id';
    END IF;
END $$;

-- √âTAPE 3: CR√âER assigned_to_user_id si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'missions' 
        AND column_name = 'assigned_to_user_id'
    ) THEN
        -- Cr√©er la colonne
        ALTER TABLE missions 
        ADD COLUMN assigned_to_user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL;
        
        -- Cr√©er l'index
        CREATE INDEX IF NOT EXISTS idx_missions_assigned_to_user 
        ON missions(assigned_to_user_id);
        
        RAISE NOTICE '‚úÖ Colonne assigned_to_user_id cr√©√©e';
        
        -- Si assigned_user_id existe, copier les donn√©es
        IF EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'missions' 
            AND column_name = 'assigned_user_id'
        ) THEN
            UPDATE missions 
            SET assigned_to_user_id = assigned_user_id
            WHERE assigned_user_id IS NOT NULL
            AND assigned_to_user_id IS NULL;
            
            RAISE NOTICE '‚úÖ Donn√©es copi√©es de assigned_user_id vers assigned_to_user_id';
        END IF;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  assigned_to_user_id existe d√©j√†';
    END IF;
END $$;

-- √âTAPE 4: Recr√©er la fonction join_mission_with_code
DROP FUNCTION IF EXISTS join_mission_with_code(TEXT, UUID) CASCADE;

CREATE OR REPLACE FUNCTION join_mission_with_code(
    p_share_code TEXT,
    p_user_id UUID
)
RETURNS JSON AS $$
DECLARE
    v_mission_id UUID;
    v_creator_id UUID;
    v_current_assigned_id UUID;
    v_status TEXT;
BEGIN
    RAISE NOTICE 'üîç Recherche mission avec code: %, user: %', p_share_code, p_user_id;
    
    -- Trouver la mission
    SELECT 
        id, 
        user_id,
        assigned_to_user_id,
        status
    INTO 
        v_mission_id,
        v_creator_id,
        v_current_assigned_id,
        v_status
    FROM missions 
    WHERE UPPER(TRIM(REPLACE(share_code, '-', ''))) = UPPER(TRIM(REPLACE(p_share_code, '-', '')))
    LIMIT 1;
    
    -- Mission non trouv√©e
    IF v_mission_id IS NULL THEN
        RAISE NOTICE '‚ùå Mission non trouv√©e avec code: %', p_share_code;
        RETURN json_build_object(
            'success', false,
            'error', 'Code invalide',
            'message', 'Aucune mission trouv√©e avec ce code'
        );
    END IF;
    
    RAISE NOTICE '‚úÖ Mission trouv√©e: %, cr√©ateur: %, assign√©e √†: %, statut: %', 
        v_mission_id, v_creator_id, v_current_assigned_id, v_status;
    
    -- V√©rifier que ce n'est pas le cr√©ateur
    IF v_creator_id = p_user_id THEN
        RAISE NOTICE '‚ùå L''utilisateur est le cr√©ateur de la mission';
        RETURN json_build_object(
            'success', false,
            'error', 'Mission propre',
            'message', 'Vous ne pouvez pas rejoindre votre propre mission'
        );
    END IF;
    
    -- V√©rifier si d√©j√† assign√©e √† quelqu'un d'autre
    IF v_current_assigned_id IS NOT NULL AND v_current_assigned_id != p_user_id THEN
        RAISE NOTICE '‚ùå Mission d√©j√† assign√©e √†: %', v_current_assigned_id;
        RETURN json_build_object(
            'success', false,
            'error', 'Mission d√©j√† assign√©e',
            'message', 'Cette mission a d√©j√† √©t√© assign√©e √† un autre utilisateur'
        );
    END IF;
    
    -- V√©rifier le statut
    IF v_status IN ('cancelled', 'completed') THEN
        RAISE NOTICE '‚ùå Mission termin√©e/annul√©e: %', v_status;
        RETURN json_build_object(
            'success', false,
            'error', 'Mission termin√©e',
            'message', 'Cette mission est d√©j√† termin√©e ou annul√©e'
        );
    END IF;
    
    -- Assigner la mission
    UPDATE missions 
    SET 
        assigned_to_user_id = p_user_id,
        status = CASE 
            WHEN status = 'pending' THEN 'in_progress'
            ELSE status
        END,
        updated_at = NOW()
    WHERE id = v_mission_id;
    
    RAISE NOTICE '‚úÖ Mission assign√©e avec succ√®s √† l''utilisateur: %', p_user_id;
    
    -- Retourner succ√®s
    RETURN json_build_object(
        'success', true,
        'mission_id', v_mission_id,
        'message', 'Mission ajout√©e avec succ√®s √† votre liste'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå ERREUR: %', SQLERRM;
        RETURN json_build_object(
            'success', false,
            'error', 'Erreur serveur',
            'message', SQLERRM
        );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- √âTAPE 5: Donner les permissions
GRANT EXECUTE ON FUNCTION join_mission_with_code(TEXT, UUID) TO authenticated;
GRANT EXECUTE ON FUNCTION join_mission_with_code(TEXT, UUID) TO anon;

-- √âTAPE 6: Forcer PostgREST √† recharger
NOTIFY pgrst, 'reload schema';
NOTIFY pgrst, 'reload config';

-- √âTAPE 7: V√©rification finale
SELECT '========================================' as separator;
SELECT '‚úÖ V√âRIFICATION FINALE:' as info;
SELECT '========================================' as separator;

-- V√©rifier les colonnes
SELECT 
    'üìã Colonnes finales:' as info,
    column_name,
    data_type
FROM information_schema.columns
WHERE table_name = 'missions'
AND (column_name LIKE '%assign%' OR column_name LIKE '%driver%')
ORDER BY column_name;

-- V√©rifier la fonction
SELECT 
    '‚úÖ Fonction recr√©√©e:' as info,
    proname as nom,
    pg_get_function_identity_arguments(oid) as parametres
FROM pg_proc 
WHERE proname = 'join_mission_with_code';

-- Compter les missions avec codes
SELECT 
    'üìä Missions avec codes de partage:' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN assigned_to_user_id IS NOT NULL THEN 1 END) as deja_assignees,
    COUNT(CASE WHEN assigned_to_user_id IS NULL THEN 1 END) as disponibles
FROM missions
WHERE share_code IS NOT NULL;

SELECT '========================================' as separator;
SELECT '‚úÖ SCRIPT TERMIN√â!' as info;
SELECT '========================================' as separator;

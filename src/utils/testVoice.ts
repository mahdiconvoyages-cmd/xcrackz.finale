/**
 * Utilitaire de test pour la synth√®se vocale
 * Pour l'utiliser, ouvrez la console du navigateur et tapez:
 * testVoiceSetup()
 */

import VoiceAssistantService from '../services/VoiceAssistantService';

export function testVoiceSetup() {
  console.log('üß™ === TEST DE CONFIGURATION VOCALE ===');
  
  // 1. V√©rifier le support
  const supported = VoiceAssistantService.isSupported();
  console.log('1. Support navigateur:', supported ? '‚úÖ OUI' : '‚ùå NON');
  
  if (!supported) {
    console.error('‚ùå Votre navigateur ne supporte pas la synth√®se vocale');
    console.log('üí° Essayez Chrome, Edge ou Safari');
    return;
  }
  
  // 2. Lister toutes les voix disponibles
  const allVoices = VoiceAssistantService.getAvailableVoices();
  console.log(`2. Voix disponibles: ${allVoices.length} au total`);
  console.table(allVoices.map(v => ({
    name: v.name,
    lang: v.lang,
    local: v.localService ? 'üè† Local' : '‚òÅÔ∏è Cloud',
    default: v.default ? '‚≠ê D√©faut' : ''
  })));
  
  // 3. Voix fran√ßaises
  const frenchVoices = VoiceAssistantService.getFrenchVoices();
  console.log(`3. Voix fran√ßaises: ${frenchVoices.length}`);
  if (frenchVoices.length > 0) {
    console.log('üá´üá∑ Voix fran√ßaises disponibles:');
    frenchVoices.forEach((v, i) => {
      console.log(`   ${i + 1}. ${v.name} (${v.lang})`);
    });
  } else {
    console.warn('‚ö†Ô∏è Aucune voix fran√ßaise trouv√©e');
  }
  
  // 3b. Voix f√©minines fran√ßaises
  const femaleVoices = VoiceAssistantService.getFemaleVoices();
  console.log(`\nüë© Voix F√âMININES fran√ßaises: ${femaleVoices.length}`);
  if (femaleVoices.length > 0) {
    console.log('üíÉ Voix f√©minines fran√ßaises disponibles:');
    femaleVoices.forEach((v, i) => {
      console.log(`   ${i + 1}. ${v.name} (${v.lang}) ${v.localService ? 'üè†' : '‚òÅÔ∏è'}`);
    });
  } else {
    console.log('‚ÑπÔ∏è Aucune voix explicitement f√©minine d√©tect√©e');
    console.log('   ‚Üí Le syst√®me utilisera la meilleure voix fran√ßaise disponible');
  }
  
  // 4. Configuration actuelle
  const config = VoiceAssistantService.getConfig();
  console.log('4. Configuration actuelle:', config);
  
  // 5. Test de parole
  console.log('5. Test de parole en cours...');
  console.log('üîä Vous devriez entendre: "Bonjour, je suis votre assistante vocale professionnelle."');
  
  VoiceAssistantService.onSpeakStart(() => {
    console.log('‚úÖ D√©but de la parole');
  });
  
  VoiceAssistantService.onSpeakEnd(() => {
    console.log('‚úÖ Fin de la parole - Test r√©ussi !');
  });
  
  VoiceAssistantService.speak('Bonjour, je suis votre assistante vocale professionnelle. Je parle de mani√®re naturelle et agr√©able.')
    .then(() => {
      console.log('üéâ === TEST TERMIN√â AVEC SUCC√àS ===');
    })
    .catch((error) => {
      console.error('‚ùå Erreur lors du test:', error);
      console.log('üí° V√©rifiez que le volume de votre syst√®me n\'est pas √† 0');
      console.log('üí° V√©rifiez que votre navigateur n\'est pas en mode silencieux');
    });
}

export function testFrenchVoices() {
  console.log('üá´üá∑ === TEST DES VOIX FRAN√áAISES ===');
  
  const frenchVoices = VoiceAssistantService.getFrenchVoices();
  
  if (frenchVoices.length === 0) {
    console.warn('‚ùå Aucune voix fran√ßaise trouv√©e');
    return;
  }
  
  console.log(`Nombre de voix fran√ßaises: ${frenchVoices.length}`);
  
  const testText = 'Bonjour, je suis une voix de synth√®se vocale.';
  
  frenchVoices.forEach((voice, index) => {
    setTimeout(() => {
      console.log(`\nüîä Test de la voix ${index + 1}/${frenchVoices.length}:`);
      console.log(`   Nom: ${voice.name}`);
      console.log(`   Langue: ${voice.lang}`);
      console.log(`   Local: ${voice.localService ? 'Oui' : 'Non'}`);
      
      VoiceAssistantService.speak(testText)
        .then(() => console.log(`   ‚úÖ Test de ${voice.name} termin√©`))
        .catch(err => console.error(`   ‚ùå Erreur avec ${voice.name}:`, err));
    }, index * 4000); // 4 secondes entre chaque test
  });
}

export function configureVoice(options: {
  rate?: number;
  pitch?: number;
  volume?: number;
}) {
  console.log('‚öôÔ∏è Configuration de la voix:', options);
  VoiceAssistantService.setConfig(options);
  
  console.log('‚úÖ Configuration mise √† jour');
  console.log('üß™ Test avec la nouvelle configuration...');
  
  VoiceAssistantService.speak('Configuration vocale mise √† jour.')
    .then(() => console.log('‚úÖ Test termin√©'))
    .catch(err => console.error('‚ùå Erreur:', err));
}

// Exemples de configurations
export const voicePresets = {
  normal: { rate: 1.0, pitch: 1.0, volume: 1.0 },
  fast: { rate: 1.5, pitch: 1.0, volume: 1.0 },
  slow: { rate: 0.7, pitch: 1.0, volume: 1.0 },
  deep: { rate: 0.9, pitch: 0.7, volume: 1.0 },
  high: { rate: 1.0, pitch: 1.3, volume: 1.0 },
  natural: { rate: 1.1, pitch: 1.0, volume: 1.0 },
};

// Exposer dans window pour acc√®s facile depuis la console
if (typeof window !== 'undefined') {
  (window as any).testVoiceSetup = testVoiceSetup;
  (window as any).testFrenchVoices = testFrenchVoices;
  (window as any).configureVoice = configureVoice;
  (window as any).voicePresets = voicePresets;
  (window as any).VoiceAssistantService = VoiceAssistantService;
  
  console.log('üéôÔ∏è Utilitaires vocaux charg√©s !');
  console.log('üìù Commandes disponibles:');
  console.log('   ‚Ä¢ testVoiceSetup() - Tester la configuration');
  console.log('   ‚Ä¢ testFrenchVoices() - Tester toutes les voix fran√ßaises');
  console.log('   ‚Ä¢ configureVoice({rate: 1.2, pitch: 0.9}) - Configurer la voix');
  console.log('   ‚Ä¢ voicePresets - Voir les pr√©r√©glages disponibles');
  console.log('   ‚Ä¢ VoiceAssistantService - Acc√®s direct au service');
}

export default {
  testVoiceSetup,
  testFrenchVoices,
  configureVoice,
  voicePresets,
};

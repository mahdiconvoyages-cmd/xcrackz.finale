/**
 * üõ°Ô∏è Clara Data Validator - Validation stricte des donn√©es
 * 
 * R√àGLE ABSOLUE: Clara ne donne JAMAIS de donn√©es moqu√©es
 * Toutes les donn√©es doivent exister dans la base de donn√©es Supabase
 * 
 * Fonctionnalit√©s:
 * - Validation existence dans DB avant affichage
 * - Interdiction des donn√©es fictives/moques
 * - V√©rification des permissions utilisateur
 * - Formatage s√©curis√© des r√©ponses
 * - D√©tection automatique de donn√©es suspectes
 * 
 * AM√âLIORATIONS v2:
 * - D√©tection de patterns de donn√©es moqu√©es
 * - Validation renforc√©e avec mots suspects
 * - Messages d'erreur clairs pour Clara
 */

import { supabase } from '../lib/supabase';

// ============================================
// TYPES
// ============================================

export interface ValidationResult {
  isValid: boolean;
  data?: any;
  error?: string;
  source: 'database' | 'cache' | 'none';
}

export interface DataQuery {
  table: string;
  filters?: Record<string, any>;
  userId?: string;
  limit?: number;
}

// ============================================
// VALIDATEURS PAR TYPE DE DONN√âES
// ============================================

/**
 * ‚úÖ Valider l'existence d'une mission
 */
export async function validateMission(missionId: string, userId: string): Promise<ValidationResult> {
  try {
    const { data, error } = await supabase
      .from('missions')
      .select('*')
      .eq('id', missionId)
      .or(`user_id.eq.${userId},driver_id.eq.${userId}`)
      .single();

    if (error || !data) {
      return {
        isValid: false,
        error: "‚ùå Mission introuvable ou acc√®s non autoris√©",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

/**
 * ‚úÖ Valider l'existence d'un contact
 */
export async function validateContact(contactEmail: string, userId: string): Promise<ValidationResult> {
  try {
    const { data, error } = await supabase
      .from('contacts')
      .select('*')
      .eq('contact_email', contactEmail)
      .eq('user_id', userId)
      .single();

    if (error || !data) {
      return {
        isValid: false,
        error: "‚ùå Contact introuvable dans votre liste de contacts",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

/**
 * ‚úÖ Valider l'existence d'un client
 */
export async function validateClient(clientId: string, userId: string): Promise<ValidationResult> {
  try {
    const { data, error } = await supabase
      .from('clients')
      .select('*')
      .eq('id', clientId)
      .eq('user_id', userId)
      .single();

    if (error || !data) {
      return {
        isValid: false,
        error: "‚ùå Client introuvable dans votre base clients",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

/**
 * ‚úÖ Valider l'existence d'un rapport d'inspection
 */
export async function validateInspectionReport(reportId: string, userId: string): Promise<ValidationResult> {
  try {
    // V√©rifier dans la table inspections (unifi√©e)
    const { data: inspectionData, error } = await supabase
      .from('inspections')
      .select('*')
      .eq('id', reportId)
      .single();

    // Si erreur ou pas de donn√©es
    if (error || !inspectionData) {
      return {
        isValid: false,
        error: error?.message || "‚ùå Rapport d'inspection introuvable",
        source: 'none'
      };
    }

    // V√©rifier les permissions
    if (inspectionData.user_id !== userId) {
      return {
        isValid: false,
        error: "‚ùå Acc√®s non autoris√© √† ce rapport",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data: inspectionData,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

/**
 * ‚úÖ Valider l'existence d'un trajet covoiturage
 */
export async function validateCarpoolTrip(tripId: string): Promise<ValidationResult> {
  try {
    const { data, error } = await supabase
      .from('carpooling')
      .select('*')
      .eq('id', tripId)
      .eq('status', 'active')
      .single();

    if (error || !data) {
      return {
        isValid: false,
        error: "‚ùå Trajet de covoiturage introuvable ou inactif",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

/**
 * ‚úÖ Valider les cr√©dits disponibles
 */
export async function validateCredits(userId: string, requiredCredits: number): Promise<ValidationResult> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('credits')
      .eq('id', userId)
      .single();

    if (error || !data) {
      return {
        isValid: false,
        error: "‚ùå Impossible de v√©rifier le solde de cr√©dits",
        source: 'none'
      };
    }

    const currentCredits = data.credits || 0;
    const isValid = currentCredits >= requiredCredits;

    return {
      isValid,
      data: {
        current: currentCredits,
        required: requiredCredits,
        sufficient: isValid
      },
      error: isValid ? undefined : `‚ùå Cr√©dits insuffisants (vous avez ${currentCredits}, il faut ${requiredCredits})`,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur lors de la validation: ${err}`,
      source: 'none'
    };
  }
}

// ============================================
// REQU√äTES G√âN√âRIQUES VALID√âES
// ============================================

/**
 * üîç R√©cup√©rer des donn√©es de mani√®re s√©curis√©e
 * GARANTIE: Retourne uniquement des donn√©es r√©elles de la DB
 */
export async function getValidatedData(query: DataQuery): Promise<ValidationResult> {
  try {
    let supabaseQuery = supabase.from(query.table).select('*');

    // Appliquer les filtres
    if (query.filters) {
      Object.entries(query.filters).forEach(([key, value]) => {
        supabaseQuery = supabaseQuery.eq(key, value);
      });
    }

    // Filtrer par utilisateur si sp√©cifi√©
    if (query.userId) {
      supabaseQuery = supabaseQuery.eq('user_id', query.userId);
    }

    // Limiter les r√©sultats
    if (query.limit) {
      supabaseQuery = supabaseQuery.limit(query.limit);
    }

    const { data, error } = await supabaseQuery;

    if (error) {
      return {
        isValid: false,
        error: `‚ùå Erreur lors de la r√©cup√©ration des donn√©es: ${error.message}`,
        source: 'none'
      };
    }

    if (!data || data.length === 0) {
      return {
        isValid: false,
        error: "‚ùå Aucune donn√©e trouv√©e",
        source: 'none'
      };
    }

    return {
      isValid: true,
      data,
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur inattendue: ${err}`,
      source: 'none'
    };
  }
}

/**
 * üìä Compter des enregistrements de mani√®re valid√©e
 */
export async function getValidatedCount(query: DataQuery): Promise<ValidationResult> {
  try {
    let supabaseQuery = supabase.from(query.table).select('*', { count: 'exact', head: true });

    if (query.filters) {
      Object.entries(query.filters).forEach(([key, value]) => {
        supabaseQuery = supabaseQuery.eq(key, value);
      });
    }

    if (query.userId) {
      supabaseQuery = supabaseQuery.eq('user_id', query.userId);
    }

    const { count, error } = await supabaseQuery;

    if (error) {
      return {
        isValid: false,
        error: `‚ùå Erreur lors du comptage: ${error.message}`,
        source: 'none'
      };
    }

    return {
      isValid: true,
      data: { count: count || 0 },
      source: 'database'
    };
  } catch (err) {
    return {
      isValid: false,
      error: `Erreur inattendue: ${err}`,
      source: 'none'
    };
  }
}

// ============================================
// FORMATAGE S√âCURIS√â DES R√âPONSES
// ============================================

/**
 * üìù Formater une r√©ponse pour Clara
 * GARANTIE: Pas de donn√©es moqu√©es, seulement des infos r√©elles
 */
export function formatClaraResponse(validationResult: ValidationResult, _context?: string): string {
  if (!validationResult.isValid) {
    return `‚ùå ${validationResult.error || 'Donn√©es non disponibles'}

üí° **Je ne peux afficher que des informations r√©elles de votre compte.**
Si cette information devrait exister, v√©rifiez qu'elle est bien enregistr√©e dans votre base de donn√©es.`;
  }

  return '‚úÖ Donn√©es valid√©es et r√©cup√©r√©es depuis votre base de donn√©es.';
}

/**
 * üö´ Bloquer les r√©ponses avec donn√©es fictives
 */
export function blockMockData(response: string): boolean {
  const mockIndicators = [
    /exemple?/i,
    /fictif/i,
    /test(?!er)/i, // "test" mais pas "tester"
    /demo/i,
    /sample/i,
    /placeholder/i,
    /lorem ipsum/i,
    /xxx/i,
    /\[.*\]/,  // [placeholder]
    /\{.*\}/,  // {placeholder}
    /TODO/i,
    /√† d√©finir/i,
    /non renseign√©/i,
  ];

  return mockIndicators.some(pattern => pattern.test(response));
}

/**
 * üîç V√©rifier si une donn√©e existe avant de la mentionner
 */
export async function checkDataExists(
  table: string,
  field: string,
  value: any,
  userId?: string
): Promise<boolean> {
  try {
    let query = supabase
      .from(table)
      .select('id')
      .eq(field, value);

    if (userId) {
      query = query.eq('user_id', userId);
    }

    const { data, error } = await query.single();

    return !error && !!data;
  } catch {
    return false;
  }
}

// ============================================
// D√âTECTION DE DONN√âES MOQU√âES (NOUVEAU v2)
// ============================================

/**
 * üö® D√©tecte si des donn√©es semblent √™tre moqu√©es/factices
 * INTERDICTION ABSOLUE de retourner des donn√©es moqu√©es
 */
export function detectMockData(data: any): {
  isMock: boolean;
  reasons: string[];
} {
  const reasons: string[] = [];
  
  if (!data) {
    return { isMock: false, reasons: [] };
  }
  
  const dataStr = JSON.stringify(data).toLowerCase();
  
  // 1. Mots suspects dans les donn√©es
  const mockIndicators = [
    'test',
    'mock',
    'fake',
    'example',
    'sample',
    'demo',
    'lorem ipsum',
    'xxx',
    'yyy',
    'zzz',
    'placeholder',
    'dummy',
    'fictif',
    'exemple',
  ];
  
  mockIndicators.forEach(indicator => {
    if (dataStr.includes(indicator)) {
      reasons.push(`Contient le terme suspect: "${indicator}"`);
    }
  });
  
  // 2. Emails suspects
  const suspectEmails = [
    'test@test',
    'example@example',
    'user@example.com',
    'admin@admin',
    'demo@demo',
  ];
  
  suspectEmails.forEach(email => {
    if (dataStr.includes(email)) {
      reasons.push(`Email suspect: ${email}`);
    }
  });
  
  // 3. Patterns suspects dans les IDs
  if (data.id && typeof data.id === 'string') {
    if (/^(test|mock|fake|demo)-/.test(data.id)) {
      reasons.push('ID avec pr√©fixe suspect');
    }
    
    if (/^(111|222|333|999)/.test(data.id)) {
      reasons.push('ID avec pattern r√©p√©titif suspect');
    }
  }
  
  // 4. Dates suspectes (ann√©e 1970, 2000, 2099)
  if (data.created_at || data.date) {
    const dateStr = data.created_at || data.date;
    if (dateStr.includes('1970') || dateStr.includes('2000') || dateStr.includes('2099')) {
      reasons.push('Date suspecte (ann√©e par d√©faut)');
    }
  }
  
  // 5. Valeurs par d√©faut suspectes
  if (data.reference && /^(REF|MIS|INS)-0{3,}/.test(data.reference)) {
    reasons.push('R√©f√©rence avec pattern par d√©faut');
  }
  
  return {
    isMock: reasons.length > 0,
    reasons,
  };
}

/**
 * üõ°Ô∏è Valide les donn√©es ET rejette si moqu√©es
 */
export async function validateAndRejectMock(
  query: DataQuery
): Promise<ValidationResult> {
  // 1. Validation normale
  const result = await getValidatedData(query);
  
  if (!result.isValid || !result.data) {
    return result;
  }
  
  // 2. D√©tection de donn√©es moqu√©es
  const mockDetection = detectMockData(result.data);
  
  if (mockDetection.isMock) {
    console.warn('‚ö†Ô∏è [Clara] DONN√âES MOQU√âES D√âTECT√âES:', mockDetection.reasons);
    return {
      isValid: false,
      error: `Donn√©es suspectes d√©tect√©es et rejet√©es: ${mockDetection.reasons.join(', ')}`,
      source: 'none',
    };
  }
  
  // 3. Donn√©es r√©elles et valides ‚úÖ
  return result;
}

/**
 * üìä Formatte un message d'erreur clair pour Clara
 */
export function formatErrorForClara(validation: ValidationResult): string {
  if (validation.isValid) {
    return '';
  }
  
  if (validation.source === 'none') {
    return "Je n'ai trouv√© aucune information correspondante dans votre compte.";
  }
  
  if (validation.error) {
    if (validation.error.includes('suspect')) {
      return "Les donn√©es trouv√©es ne semblent pas valides. Veuillez v√©rifier votre compte.";
    }
    
    if (validation.error.includes('manquants')) {
      return "Les informations sont incompl√®tes. Certains d√©tails sont manquants.";
    }
    
    if (validation.error.includes('permission')) {
      return "Vous n'avez pas acc√®s √† ces informations.";
    }
    
    return validation.error;
  }
  
  return "Une erreur s'est produite lors de la v√©rification des donn√©es.";
}

// ============================================
// EXPORTS
// ============================================

export default {
  // Validateurs sp√©cifiques
  validateMission,
  validateContact,
  validateClient,
  validateInspectionReport,
  validateCarpoolTrip,
  validateCredits,
  
  // Requ√™tes g√©n√©riques
  getValidatedData,
  getValidatedCount,
  
  // Formatage
  formatClaraResponse,
  blockMockData,
  checkDataExists,
  
  // Nouveaux (v2)
  detectMockData,
  validateAndRejectMock,
  formatErrorForClara,
};
